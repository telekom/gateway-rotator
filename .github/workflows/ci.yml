# SPDX-FileCopyrightText: 2025 Deutsche Telekom IT GmbH
#
# SPDX-License-Identifier: Apache-2.0

name: CI

# Required secrets:
# - REGISTRY_HOST: e.g. mtr.devops.telekom.de
# - REGISTRY_REPO: e.g. /tardis-internal/gateway/rotator
# - REGISTRY_AUTH_USER: Name of MTR robot user
# - REGISTRY_AUTH_TOKEN: Name of MTR robot token
# - COSIGN_KEY: Private key file used for image signing

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  # ------------
  # Linting Jobs
  # ------------
  lint-go:
    name: Lint Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Run linter
        uses: golangci/golangci-lint-action@v7

  lint-reuse:
    name: Check REUSE compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v5

  check-generated-changes:
    name: Check generated code is up-to-date
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Generate manifests
        run: make manifests
      - name: Generate boilerplate
        run: make generate
      - name: Ensure nothing has changed
        run: git diff --exit-code -- . ':!go.sum' ':!go.mod'

  check-changes:
    name: Check which files changed
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      deps: ${{ steps.filter.outputs.deps }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          deps:
            - 'go.sum'

  ort:
    name: ORT scan
    runs-on: ubuntu-latest
    needs:
      - check-changes
    # Only run if deps have changed
    #if: ${{ needs.check-changes.outputs.deps == 'true' }}
    if: false # skip until it's  performant
    steps:
      - name: Use HTTPS for Git cloning
        run: git config --global url.https://github.com/.insteadOf ssh://git@github.com/
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Prepare ORT config
        # This allows us to customize the default ORT config available at
        # https://github.com/oss-review-toolkit/ort-config
        # using our own config file stored in .github/ort/config.yml
        # Note that this is the global config, not the repo specific one
        run: |
          # Move into default config dir
          export ORT_CONFIG_DIR=$HOME/.ort/config
          mkdir -p ${ORT_CONFIG_DIR}
          cd ${ORT_CONFIG_DIR}
          # Checkout default config repo
          git init -q
          git remote add origin https://github.com/oss-review-toolkit/ort-config.git
          git fetch -q --depth 1 origin main
          git checkout -q FETCH_HEAD
          # Copy custom config into config dir
          cp ${GITHUB_WORKSPACE}/.github/ort/config.yml ${ORT_CONFIG_DIR}
      - name: Run GitHub Action for ORT
        uses: oss-review-toolkit/ort-ci-github-action@v1
        with:
          fail-on: violations
          run: >
            cache-dependencies,
            cache-scan-results,
            labels,
            analyzer,
            scanner,
            advisor,
            evaluator,
            reporter,
            upload-results

  # ----------
  # Build jobs
  # ----------
  build-go:
    name: Build Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Build
        run: go build ./cmd/main.go

  # ---------
  # Test jobs
  # ---------
  govulncheck:
    # this also scans dependencies
    name: Check for vulnerabilities (govulncheck)
    runs-on: ubuntu-latest
    needs:
      - build-go
    steps:
      - id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '' # default is 'stable' which overrides the file input
          go-version-file: go.mod
          go-package: ./...

  test-go-unit:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs:
      - build-go
    permissions:
      pull-requests: write
      checks: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Setup envtest
        run: make setup-envtest
      - name: Run tests
        run: make test-ci
      - name: Generate HTML coverage report
        run: go tool cover -html=cover.profile -o coverage.html
      - name: Generate Cobertura coverage report
        run: |
          go install github.com/boumenot/gocover-cobertura@latest
          gocover-cobertura < cover.profile > cobertura.xml
      - id: upload-results
        name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: |
            ./cover.profile
            ./coverage.html
            ./cobertura.xml
            ./junit.xml
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: always() && github.event_name == 'pull_request'
        with:
          report_paths: './junit.xml'
          check_name: Test Report
          comment: true
          include_passed: true
      - name: Prepare coverage comment
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: always() && github.event_name == 'pull_request'
        with:
          filename: ./cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          indicators: true
          output: both
          thresholds: '60 80'
      - name: Append coverage comment
        if: always() && github.event_name == 'pull_request'
        run: |
          sudo chown $(whoami) code-coverage-results.md
          printf "\nDownload the latest HTML coverage report [here](${{ steps.upload-results.outputs.artifact-url }})." >> code-coverage-results.md
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: always() && github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  test-go-e2e:
    name: Run E2E tests
    runs-on: ubuntu-latest
    needs:
      - build-go
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Install the latest version of kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
      - name: Verify kind installation
        run: kind version
      - name: Create kind cluster
        run: kind create cluster
      - name: Run tests
        run: make test-e2e-ci

  # ---------
  # Image jobs
  # ---------
  build-push-image:
    name: Build & push image to MTR
    runs-on: ubuntu-latest
    needs:
      - build-go
      - test-go-unit
      - test-go-e2e
    outputs:
      image-digest: ${{ steps.build-push.outputs.image-digest }}
      image-tag: ${{ steps.build-push.outputs.image-digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Setup ko
        uses: ko-build/setup-ko@v0.8
      - name: Inject slug vars
        uses: rlespinasse/github-slug-action@v5
      - name: Determine tag
        id: tag
        run: |
          if [[ "${GITHUB_HEAD_REF_SLUG}" == "main" ]]; then
            export TAG="latest"
          else
            export TAG="${GITHUB_HEAD_REF_SLUG}-${GITHUB_RUN_ID}"
          fi
          echo "Image tag will be: ${TAG}"
          echo "image-tag=${TAG}" >> "${GITHUB_OUTPUT}"
      - name: Login to registry
        run: |
          ko login ${{ secrets.REGISTRY_HOST }} \
          --username "${{ secrets.REGISTRY_AUTH_USER }}" \
          --password "${{ secrets.REGISTRY_AUTH_TOKEN }}"
      - name: Build and push
        id: build-push
        run: |
          export KO_DOCKER_REPO=${{ secrets.REGISTRY_HOST }}${{ secrets.REGISTRY_REPO }}
          export SOURCE_DATE_EPOCH=$(date +%s)
          export GOFLAGS="-buildvcs=false"
          ko build \
            --bare \
            --tags "${{ steps.tag.outputs.image-tag }}" \
            ./cmd | sed 's/.*@//'  > ./digest
          export DIGEST=$(cat ./digest)
          echo "Digest: ${DIGEST}"
          echo "image-digest=${DIGEST}" >> "${GITHUB_OUTPUT}"

  scan-image:
    name: Scan image
    runs-on: ubuntu-latest
    needs:
      - build-push-image
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        env:
          TRIVY_USERNAME: ${{ secrets.REGISTRY_AUTH_USER }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_AUTH_TOKEN }}
        with:
          image-ref: '${{ secrets.REGISTRY_HOST }}${{ secrets.REGISTRY_REPO }}@${{ needs.build-push-image.outputs.image-digest }}'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sign-image:
    name: Sign image
    runs-on: ubuntu-latest
    needs:
      - build-push-image
      - scan-image
      - govulncheck
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1
      - name: Sign image
        run: |
          export COSIGN_KEY=${{ secrets.COSIGN_KEY }}
          cosign sign \
            --key "env://COSIGN_KEY" \
            -a "repo=${{ github.repository }}" \
            -a "commit-sha=${{ github.sha }}" \
            --tlog-upload=false \
            -y \
            "${{ secrets.REGISTRY_HOST }}${{ secrets.REGISTRY_REPO }}@${{ needs.build-push-image.outputs.image-digest }}"
